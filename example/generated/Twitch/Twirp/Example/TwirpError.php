<?php
# Generated by the protocol buffer compiler (protoc-gen-twirp_php master).  DO NOT EDIT!

namespace Twitch\Twirp\Example;

use Twirp\ErrorCode;
use Twirp\Error;

/**
 * Error class implementation for Twirp errors.
 */
final class TwirpError extends \Exception implements Error
{
    /**
     * @var string
     */
    private $errorCode;

    /**
     * @var string
     */
    private $msg;

    /**
     * @var array
     */
    private $meta = [];

    public function __construct($code, $msg)
    {
        $this->errorCode = $code;
        $this->msg = $msg;

        parent::__construct($msg);
    }

    /**
     * {@inheritdoc}
     */
    public function code()
    {
        return $this->errorCode;
    }

    /**
     * {@inheritdoc}
     */
    public function msg()
    {
        return $this->msg;
    }

    /**
     * {@inheritdoc}
     */
    public function withMeta($key, $val)
    {
        $this->meta[$key] = $val;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function meta($key)
    {
        if (isset($this->meta[$key])) {
            return $this->meta[$key];
        }

        return '';
    }

    /**
     * {@inheritdoc}
     */
    public function metaMap()
    {
        return $this->meta;
    }

    /**
     * Generic constructor for a TwirpError. The error code must be
     * one of the valid predefined constants, otherwise it will be converted to an
     * error {type: Internal, msg: "invalid error type {code}"}. If you need to
     * add metadata, use withMeta(key, value) method after building the error.
     *
     * @param string $code
     * @param string $msg
     *
     * @return self
     */
    public static function newError($code, $msg)
    {
        if (ErrorCode::isValid($code)) {
            return new self($code, $msg);
        }

        return new self(ErrorCode::Internal, 'invalid error type '.$code);
    }

    /**
     * Wrap another error. It adds the
     * underlying error's type as metadata with a key of "cause", which can be
     * useful for debugging. Should be used in the common case of an unexpected
     * error returned from another API, but sometimes it is better to build a more
     * specific error (like with self::newError(self::Unknown, $e->getMessage()), for example).
     *
     * @param \Exception $e
     *
     * @return self
     */
    public static function errorFromException(\Exception $e)
    {
        $err = new self(ErrorCode::Internal, $e->getMessage());

        $err = $err->withMeta('cause', $e->getMessage());

        return $err;
    }
}
