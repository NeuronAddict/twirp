<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: {{ .File.Name }}

namespace {{ .File | php_namespace }};

use Google\Protobuf\Internal\GPBDecodeException;
use Http\Discovery\MessageFactoryDiscovery;
use Http\Discovery\StreamFactoryDiscovery;
use Http\Message\MessageFactory;
use Http\Message\StreamFactory;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Twirp\Context;
use Twirp\RequestHandler;
use Twirp\TwirpError;

/**
 * @see {{ .Service | php_service_name }}
 *
 * Generated from protobuf service <code>{{ .File.Package }}.{{ .Service.Name }}</code>
 */
final class {{ .Service | php_service_name }}Server implements RequestHandler
{
    use Protocol;

    const PATH_PREFIX = '/twirp/{{ .File.Package }}.{{ .Service.Name }}/';

    /**
     * @var {{ .Service | php_service_name }}
     */
    private $svc;

    /**
     * @var MessageFactory
     */
    private $messageFactory;

    /**
     * @var StreamFactory
     */
    private $streamFactory;

    /**
     * @param {{ .Service | php_service_name }} $svc
     * @param MessageFactory|null $messageFactory
     * @param StreamFactory|null  $streamFactory
     */
    public function __construct(
        {{ .Service | php_service_name }} $svc,
        MessageFactory $messageFactory = null,
        StreamFactory $streamFactory = null
    ) {
        if ($messageFactory === null) {
            $messageFactory = MessageFactoryDiscovery::find();
        }

        if ($streamFactory === null) {
            $streamFactory = StreamFactoryDiscovery::find();
        }

        $this->svc = $svc;
        $this->messageFactory = $messageFactory;
        $this->streamFactory = $streamFactory;
    }

    /**
     * Handle the request and return a response.
     *
     * @param ServerRequestInterface $req
     *
     * @return ResponseInterface
     */
    public function handle(ServerRequestInterface $req)
    {
        $ctx = $req->getAttributes();
        $ctx = Context::withPackageName($ctx, '{{ .File.Package }}');
        $ctx = Context::withServiceName($ctx, '{{ .Service.Name }}');

        if ($req->getMethod() !== 'POST') {
            $msg = sprintf('unsupported method %q (only POST is allowed)', $req->getMethod());

            return $this->writeError($ctx, Error::badRoute($msg, $req->getMethod(), $req->getUri()->getPath()));
        }

        switch ($req->getUri()->getPath()) {
            {{- range $method := .Service.Method }}
            case '/twirp/{{ $.File.Package }}.{{ $.Service.Name }}/{{ $method.Name }}':
                return $this->handle{{ $method.Name }}($ctx, $req);
            {{- end }}

            default:
                $msg = sprintf('no handler for path %q', $req->getUri()->getPath());

                return $this->writeError($ctx, Error::badRoute($msg, $req->getMethod(), $req->getUri()->getPath()));
        }
    }
{{ range $method := .Service.Method }}
    {{- $inputType := $method.InputType | trimPrefix (printf ".%s." ($.File.Package | trim)) | php_fqn }}
    private function handle{{ $method.Name }}(array $ctx, ServerRequestInterface $req)
    {
        $header = $req->getHeaderLine('Content-Type');
        $i = strpos($header, ';');

        if ($i === false) {
            $i = strlen($header);
        }

        switch (trim(strtolower(substr($header, 0, $i)))) {
            case 'application/json':
                return $this->handle{{ $method.Name }}Json($ctx, $req);

            case 'application/protobuf':
                return $this->handle{{ $method.Name }}Protobuf($ctx, $req);

            default:
                $msg = sprintf('unexpected Content-Type: %q', $req->getHeaderLine('Content-Type'));

                return $this->writeError($ctx, Error::badRoute($msg, $req->getMethod(), $req->getUri()->getPath()));
        }
    }

    private function handle{{ $method.Name }}Json(array $ctx, ServerRequestInterface $req)
    {
        $ctx = Context::withMethodName($ctx, '{{ $method.Name }}');

        $in = new {{ $inputType }}();

        try {
            $in->mergeFromJsonString((string)$req->getBody());
        } catch (GPBDecodeException $e) {
            return $this->writeError($ctx, TwirpError::internalError('failed to parse request json'));
        }

        try {
            $out = $this->svc->{{ $method.Name }}($ctx, $in);
        } catch (\Twirp\Error $e) {
            return $this->writeError($ctx, $e);
        } catch (\Exception $e) {
            return $this->writeError($ctx, TwirpError::internalErrorWith($e));
        }

        $data = $out->serializeToJsonString();

        $body = $this->getStreamFactory()->createStream($data);

        return $this->getMessageFactory()
            ->createResponse(200)
            ->withHeader('Content-Type', 'application/json')
            ->withBody($body);
    }

    private function handle{{ $method.Name }}Protobuf(array $ctx, ServerRequestInterface $req)
    {
        $ctx = Context::withMethodName($ctx, '{{ $method.Name }}');

        $in = new {{ $inputType }}();

        try {
            $in->mergeFromString((string)$req->getBody());
        } catch (GPBDecodeException $e) {
            return $this->writeError($ctx, TwirpError::internalError('failed to parse request proto'));
        }

        try {
            $out = $this->svc->{{ $method.Name }}($ctx, $in);
        } catch (\Twirp\Error $e) {
            return $this->writeError($ctx, $e);
        } catch (\Exception $e) {
            return $this->writeError($ctx, TwirpError::internalErrorWith($e));
        }

        $data = $out->serializeToString();

        $body = $this->getStreamFactory()->createStream($data);

        return $this->getMessageFactory()
            ->createResponse(200)
            ->withHeader('Content-Type', 'application/protobuf')
            ->withBody($body);
    }
{{- end }}
}
